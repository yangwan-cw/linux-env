x-sql-defaults: &mysql-defaults
  image: mysql:${MYSQL_VERSION}
  networks:
    - ${MYSQL_CLUSTER_NETWORK}
  environment:
     TZ: ${TZ}
  volumes:
    - "/etc/localtime:/etc/localtime:ro"
    - "/etc/timezone:/etc/timezone:ro"
  deploy:
    resources:
      limits:
        memory: ${MEMORY_LIMIT}
  command: --lower_case_table_names=1
  restart: unless-stopped

x-jdk-defaults: &jdk-defaults
  image: ${JDK}
  container_name: ${JDK_NAME}
  ports:
    - "${JDK_PORT}:3307"
  deploy:
    resources:
      limits:
        memory: ${MEMORY_LIMIT}
  networks:
    - ${JDK_NETWORK}
  volumes:
    - "${JDK_DATA}:/root/ss"
  environment:
     TZ: ${TZ}
services:
  ss:
    <<: *jdk-defaults
    privileged: true      # 特权模式
    tty: true             # 对应 -t 参数
    stdin_open: true      # 对应 -i 参数
    command: bash         # 保持容器运行并进入交互式 Shell
  mysql1:
    <<: *mysql-defaults
    volumes:
    - "./mysql/${MYSQL_INSTANCE1_DIR}/data:/var/lib/mysql"
    - "./mysql/${MYSQL_INSTANCE1_DIR}/config:/etc/mysql/conf.d"
  #  - "${MYSQL_INIT1}:/docker-entrypoint-initdb.d/init.sql"  # 挂载初始化 SQL
    ports:
      - "${MYSQL_INSTANCE1_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_INSTANCE1_PASSWORD}"  # 实例1专用密码
      container_name: ${CONTAINER1_NAME}
      

  mysql2:
    <<: *mysql-defaults
    ports:
      - "${MYSQL_INSTANCE2_PORT}:3306"
    volumes:
    - "./mysql/${MYSQL_INSTANCE2_DIR}/data:/var/lib/mysql"
    - "./mysql/${MYSQL_INSTANCE2_DIR}/config:/etc/mysql/conf.d"
    - "${MYSQL_INIT2}:/docker-entrypoint-initdb.d/init.sql"  # 挂载初始化 SQL
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_INSTANCE2_PASSWORD}"  # 实例1专用密码
      INSTANCE_DIR: ${MYSQL_INSTANCE2_DIR}
      container_name: ${CONTAINER2_NAME}
  mysql3:
    <<: *mysql-defaults
    ports:
      - "${MYSQL_INSTANCE3_PORT}:3306"
    volumes:
    - "./mysql/${MYSQL_INSTANCE3_DIR}/data:/var/lib/mysql"
    - "./mysql/${MYSQL_INSTANCE3_DIR}/config:/etc/mysql/conf.d"
    - "${MYSQL_INIT3}:/docker-entrypoint-initdb.d/init.sql"  # 挂载初始化 SQL
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_INSTANCE3_PASSWORD}"  # 实例1专用密码
      INSTANCE_DIR: ${MYSQL_INSTANCE3_DIR}
      container_name: ${CONTAINER3_NAME}
  mysql4:
    <<: *mysql-defaults
    ports:
      - "${MYSQL_INSTANCE4_PORT}:3306"
    volumes:
    - "./mysql/${MYSQL_INSTANCE4_DIR}/data:/var/lib/mysql"
    - "./mysql/${MYSQL_INSTANCE4_DIR}/config:/etc/mysql/conf.d"
    - "${MYSQL_INIT4}:/docker-entrypoint-initdb.d/init.sql"  # 挂载初始化 SQL
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_INSTANCE4_PASSWORD}"  # 实例1专用密码
      INSTANCE_DIR: ${MYSQL_INSTANCE4_DIR}
      container_name: ${CONTAINER4_NAME}
  mysql5:
    <<: *mysql-defaults
    ports:
      - "${MYSQL_INSTANCE5_PORT}:3306"
    volumes:
    - "./mysql/${MYSQL_INSTANCE5_DIR}/data:/var/lib/mysql"
    - "./mysql/${MYSQL_INSTANCE5_DIR}/config:/etc/mysql/conf.d"
    - "${MYSQL_INIT5}:/docker-entrypoint-initdb.d/init.sql"  # 挂载初始化 SQL
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_INSTANCE5_PASSWORD}"  # 实例1专用密码
      INSTANCE_DIR: ${MYSQL_INSTANCE5_DIR}
      container_name: ${CONTAINER5_NAME}
networks:
  mysql_cluster:
    driver: bridge

